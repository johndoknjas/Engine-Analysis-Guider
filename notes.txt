IDEAS:
    
The amount of time to let Stockfish think on a normal position in the calculation
tree (e.g., depth 28) should differ from the amount of time it thinks when in a final
/ leaf position (at least when in this position the evaluation is close to the borderline
of what is acceptable). When Stockfish is just calculating in a normal position, all it's
doing is figuring out whether the evaluation is very big (so to stop there), or to find
the likely best moves to continue on with being guided through the search tree. So having
a completely accurate evaluation isn't as important as it is in a final/leaf position
of the search tree, since that evaluation is used for minimax.
    
If a move from the opponent (somewhere in the search tree) gives the goal evaluation, or
at least a fair amount better than it, no need to continue searching there. The app can just
print the evlauation, and then I can check it out myself in my own analysis. The main thing for
the app to do is analyse lines that seriously challenge the goal evaluation.
    
The user can specify the normal depth to search to, and the depth to search to when at a leaf node.
    
Use an SQL database to store engine evaluations in positions. This can allow the app to
stop running at some point, and then run again later on (the search and evaluation of those
positions will be near instant, since it will just use the DB).
    
The user can also input the threshold to not analyse a move if it's below the goal evaluation
by some amount.
    
Since the app mainly looks at moves from the player that is not dramatically above the
goal evaluation, and movesf from the opponent that aren't at the evlauation or within it,
the branching factor shouldn't be too bad? The app doesn't need to definitvely prove that a
line gives the goal evaluation. It should analyse similar to how you do - looking at the main lines,
not analysing a line that is most likely irrelevant.
    
If the app reaches the gaol evaluation at some point in the search, decide whether it should stop there
or continue searching further (to ensure the gaol evaluation holds). This could be a parameter
the user also specifies.
    
If the app can't find a line giving the gaol evaluation, it should give line(s) that is the
best it can do. Still may be useful.
    
A good test for the app would be for it to try to find a line giving a goal evaluation in some line
that you have trouble with. E.g., the ...Bg4 classical line where Black meets f4 with ...Ned7 instead of ...Bxe2.
For that, the user would set the depth parameter to be pretty high, since the goal is to fine some ~0.40 evaluation
that holds going quite deeply.

=====================================================================
TT / DB stuff:

For models.py, when setting the Stockfish instance up with a new position, the engine starts a new game
and then goes to the position. So, this may mean no using the TT as going through the Node search tree.
Also, SF wouldn't be able to recognize three folds, which could happen at around depth 6 or higher. However,
this likely isn't a big deal as it will evaluate 0.00 anyway.
    EDIT - Due to making moves based off the current FEN, SF will be able to use info about the previous
    FEN to generate the new FEN. E.g., number of full moves that have happened in the game total, the number
    of plies currently counting towards the 50 move rule. However, it still may not be able to do stuff like use
    the TT or recognize 3 fold repetitions, as these things aren't embedded in an FEN. But experiment and see
    if SF has some way to doing this anyway (after all, in chessbase SF can recognize three folds... although
    maybe chessbase doesn't start a new game with the "ucinewgame" command whenever updating a position).

Note that two positions with the same piece and pawn arrangements can have different FENs, as a
    result of using the function in models.py. E.g., f3d4 b8c6 b1c3 f7f5 versus f3d4 f7f5 b1c3 b8c6.
    If there's a White pawn on e5, then in one of the FENs the f6-square will be recorded as a square
    that en passant can happen on. Also: b1c3 g8f6 c3b1 f6g8. This will have a different FEN than the position
    it started in two moves ago, since the fullmove counter value will be increased by 2. Or
    g1f3 g8f6 d2d4 versus d2d4 g8f6 g1f3. These will result in different FENs due to different halfmove clock
    values for them. Also moving an uncastled king to a square, and then back, will result in a differnt FEN, 
    since no castling rights (or moving one of the rooks to a square and back, since no castling rights to that
    side of the board).
    All of this is good, since the new FEN of a position should be based off data from the parent Node's FEN.
    After all, you are searching/guiding the engine ahead in a calculation tree. But for looking an FEN up in an 
    SQL database or dictionary/hash table, you shouldn't care about the fullmove values or halfmove clock or fullmove counter 
    values. These don't affect the position itself (the fullmove counter is irrelevant, and the halfmove counter 
    is only relevant if nearing the 50 move rule, and even here the engine would probably give 0.00 anyway), and 
    so it's fine to use an already derived evaluation in the DB / dictionary / hash table for a position with the same 
    piece/pawn placement. However, if an FEN differs in castling rights, or if one has a certain square for 
    en passant (or they have different en passant squares), then the DB / dictionary should not be used, as it's 
    a unique position.

In the DB, store a position and the depth the engine calculated on it. Store the evaluation derived,
and also the top moves. If this position was calculated as leaf node though, there will be only
one top move. But still fine to just store that in the DB.
    On another run of the program, if the engine calculates this position again at the same depth, but a
    higher multiPV, then you can replace this entry (since the new entry will be more useful, as it will have
    more top moves).


New TT notes - June 25:

- Only store a Node's info in the DB after its derived evaluation from its child nodes is obtained. Then,
  store this derived evaluation, as well as the Node's top moves (i.e., the moves of its child nodes). Note
  that for a leaf node in a run of the application, the derived evaluation you store for it in the DB
  will be its immediate evaluation, and no child nodes will be stored for it.
  Also store the SF depth used, and how far ahead in the search tree the search went from that Node.
  And store the FEN. And maybe store a boolean value representing if, in the search tree, some branches might
  not get explored due to already meeting the goal evaluation (or having no decent chance of meeting it).
  This could affect if you'd want to use an evaluation in the DB from a search like this.
  Can also store the date and time for this DB entry, and don't have to overwrite any previous entry/entries.
  
- When using the DB to check if a position has been analyzed, see if there's a matching FEN (and in the
  FEN ignore the info that doesn't matter, like ply count and fullmove). For the DB entry, ensure the SF
  depth is at least the SF depth currently being used, and the number of layers still searched ahead from the
  Node in the DB (in order to get the derived eval) is >= to the current Node. For the multiPV value,
  it's fine if this is less in the DB if you're just getting an evaluation for a leaf node in the app.
  However, if you're getting the top moves for a node, you'll obviously want the DB to have a >= multiPV to
  what's used in the search, since you'll need at least those many top moves.
      - If so, use the DB entry (and make sure you run through all qualified entry/entries and pick the best one).
      - If the Node you're trying to evaluate in the current run of the app is a leaf node, then just get
        the derived evaluation from the DB.
      - If the Node is not a leaf node, then get the top moves from the DB, and continue normally from there
        (including updating Stockfish's FEN with the make_moves function -- always do this, as SF should
        be prepared to evaluate a position if needed, and it's not expensive to call the make_moves 
        function from parent --> child or set_fen from child --> parent). 
        The descendent nodes should then be evaluated in the same way with the DB 
        (and if for some reason a descendent isn't in the DB, SF can evaluate normally -- this might happen
        if the previous run used to generate the DB data had a different value for the goal, so maybe it
        didn't search all the top_moves for a node).

-	Should be no edge cases for low depth duplicate positions, since they can only start occurring at >= depth 3 
    in the tree (earliest it can happen I think – first side moves, then the second side, then the first side).
    
    



OBSOLETE TT ideas below, as I'll just be doing a DB immediately. Note that the ideas about storing a Node
itself in a TT won't be used (can't really be applied to a DB). Storing the Node's important data in the DB
will work fine. The thing about making a Node in a run of the search equal to a Node already evaluated won't
be used - instead, the search will instead run until the leaf nodes, and then they can be given a derived eval
already generated.
    
-	For one of these duplicate positions, set the Node’s children to the same reference as the children of 
    the Node containing the position already evaluated.
	  - Can’t set the Node itself equal to the other Node, since even though they have the same position 
	    (maybe other than irrelevant FEN details) and same evaluation and same children, they will have a 
	    different parent node.
	  - In output function, this should allow traversal from both Nodes to the same child nodes, but also 
	    allowing backwards traversal from the Nodes to their unique parents.
	  - In order to set the Node’s child nodes equal to the other Node’s child nodes, the child nodes will 
	    have to be stored in some way by the TT / DB.
    
-	Make a function that checks if a position is a duplicate, and then returns all the necessary info from the 
    TT / DB. In the function’s implementation, use a TT for now (TT will be a global var). But later on, can use a DB. 
    This won’t affect the program’s functionality, other than not being able to access evals from previous runs 
    of the program.
    
-	The TT can be a list of 1000 buckets, and each Node’s info can be stored at the index corresponding to some 
    function taking the Node’s info. The function should always return a value within 0 – 1000, and somewhat 
    randomly (maybe a modified trig function).
	  - Note that it’s fine if there are many nodes in a single bucket, since there will only be at most 
	    thousands of Nodes altogether in the search tree. So this won’t impact efficiency for Python to run 
	    through a bucket of even a thousand nodes, since it would only have to do this once for each position.


=====================================================================

If a node has only one legal move, then instead of getting SF to think on it to the specified depth (like depth
28 or something), just make the move immediately. Then for the child node, you could make its search_depth the same as the
parent's (or not sure if this will mess anything up though). Or you could just increment the child node's depth
as normal, but the point is that SF doesn't have to think on a position where there's only one legal move. So
should save time. Although likely not extremely beneficial, since SF's TT would become stronger if it had
calculated in the parent node.
    If it's a leaf node with only one legal move, then it could be useful for SF to instead calculate
    in the position after making the move. Not sure if this will help the seldepth or not.
    
    For checking if there's only one legal move, you'd have to do it in some cheap way. E.g., get stockfish
    to think at depth 2 or something, with multiPV = 2. If only one top move is returned by get_top_moves,
    then only one legal move. Just make sure doing this won't make the app more inefficient overall.
    
    Could potentially extend this concept involving one legal move to positions where there's only one
    reasonable move (i.e., all other moves are very bad). But you'd likely need to go to let SF think to
    a sufficient depth to ensure this, which might be a little inefficient.

Could display an ongoing estimate of how much the program is completed, every 10 seconds or something
Calculate by seeing how many nodes have been evaluated in total, and how many still have to be
evaluated (multiPV ^ depth, which can be stored in some global variable). If you get to a node that has an 
evaluation that makes you stop the search there (e.g., too far from the goal evaluation), then 
figure out the number of descendant nodes it has that have essentially been trimmed, and 
subtract that from the global variable that stored the multiPV ^ depth figure. Alternatively, you could
add the number of descendent nodes that have been trimmed to the figure storing the number of nodes
already calculated, and then divide that by the multiPV ^ depth figure.
    Also when in a node, but only a few of its child(ren) are considered (less than the multiPV value),
    once again this involves branches being trimmed.
    
Once/if you create a GUI, you can display this ongoing estimate in the form of a continuously updated
progress bar (maybe updated every few seconds - shouldn't have much/any impact on the SF engine thinking?).
In the GUI you can also display a chess board showing the current position being calculated.
    For the GUI, try not to have a separate thread running for it while the SF enging is calculating in
    the Node search tree. Whenever a new Node is created, then call a function that updates the GUI
    with the progress bar stuff and the position being calculated. Since there should be no user input
    allowed in the GUI at this time, no thread should be needed. Only time input could possibly be allowed in
    the GUI is before SF calculates through the search tree (e.g., for getting preliminary parameter data
    from the user, but even here the command line may be better).
    




Now that the official Stockfish 13 release is being used for the exe,
there seems to no longer be the problem with the best move not match the first move
of the top PV. Test further by outputting the lines in get_top_moves to ensure
this is always the case. Also, test if the evaluation equals the evaluation of the
top PV (it should). If this is all so, then great.

It looks like the above is the case, as I've been using the official SF release for a while
and it's all good. But try to figure out whether/why this was an issue before (checkout earlier commits
and experiment). If it was due to using a different release (or a version in-between releases), then will 
this be a problem for anyone using one of these versions of SF? Both for currently avaiable versions
and versions that could be out in the future.
    If it is in fact an issue, then maybe look into modifying get_top_moves() to accommodate this?
    Also, if it's an issue for get_top_moves, then experiment with other functions in models.py to see
    if there's any issues there as well. But even in this scenario there likely won't be any issue, since
    the problem in the first place before was the top move's first move not matching the best move SF outputted.